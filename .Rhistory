dim(data)
# Selecionando variaveis
intel <- data$intc
head(intel)
# Declarando time series
intel <- ts(intel, frequency = 12, start = c(1973, 1))
# Plots
library(TSA)
# Plots
install.packages("TSA")
# Plots
#install.packages("TSA")
library(TSA)
par(mfrow=c(1,2))
plot(intel, main = "Retornos da Intel", ylab = "Retorno")
acf(intel, main = "ACF dos Retornos")
par(mfrow=c(1,1))
# Ljung-Box
library(portes)
# Ljung-Box
install.packages("portes")
library(portes)
LjungBox(intel, lags = c(3,6,9,12), order = 0)
# Selecao de modelo ARMA
install.packages("forecast")
install.packages("forecast")
library(forecast)
auto.arima(intel, ic = "bic", max.P = 0, max.Q = 0)
# Teste de efeitos ARCH
install.packages("aTSA")
library(aTSA)
arch.test(arma.intel)
# Modelo ARMA(0,0)
arma.intel <- arima(intel, order = c(0,0,0), method = "ML")
resid <- resid(arma.intel)
# Teste de efeitos ARCH
#install.packages("aTSA")
library(aTSA)
arch.test(arma.intel)
# Estimacao
pacf(resid^2, main = "PACF do quadrado dos resíduos")
library(rugarch)
arch4 <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(4,0)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
install.packages("rugarch")
library(rugarch)
arch4 <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(4,0)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
arch4.fit <- ugarchfit(spec = arch4, data = intel)
arch4.fit
arch1 <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,0)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
arch1.fit <- ugarchfit(spec = arch1, data = intel)
arch1.fit
# Volatilidade estimada
vol.arch1 <- sigma(arch1.fit)
plot(vol.arch1)
# Forecast passos a frente
ugarchforecast(arch1.fit, n.ahead = 6)
plot(ugarchforecast(arch1.fit, n.ahead = 6), which = 3)
arch.test(arma.intel)
# Definindo diretorio de trabalho
setwd("D:/Users/25052288840/Downloads/FIA_data_mining/Aula 11 - Análise de Séries Temporais/Data")
# Carregando arquivo
data <- read.table("Data.csv", header = TRUE)
head(data)
dim(data)
garch <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garch.fit <- ugarchfit(spec = garch, data = data)
garch.fit
View(data)
View(data)
# Carregando arquivo
data <- read.table("Data.csv", header = TRUE, sep=',')
head(data)
dim(data)
# Selecionando variaveis
intel <- data$
head(intel)
head(vale)
# Selecionando variaveis
vale <- data$VALE3
head(vale)
# Declarando time series
vale <- ts(vale, frequency = 12, start = c(2001, 1))
garch <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garch.fit <- ugarchfit(spec = garch, data = vale)
garch.fit
# Volatilidade estimada
vol.garch <- sigma(garch.fit)
plot(vol.garch)
# Forecast passos a frente
ugarchforecast(garch.fit, n.ahead = 6)
plot(ugarchforecast(garch.fit, n.ahead = 6), which = 3)
petr <- ts(data$PETR4, frequency = 12, start = c(2001, 1))
ibov <- ts(data$IBOV, frequency = 12, start = c(2001, 1))
garchpetr <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchpetr.fit <- ugarchfit(spec = garch, data = petr)
garchpetr.fit
# Volatilidade estimada
vol.garchpetr <- sigma(garchpetr.fit)
plot(vol.garchpetr)
garchibov <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchibov.fit <- ugarchfit(spec = garch, data = ibov)
garchibov.fit
# Volatilidade estimada
vol.garchibov <- sigma(garchibov.fit)
plot(vol.garchibov)
plot(vol.garch)
par(mfrow=c(1,3))
plot(vol.garch)
plot(vol.garchpetr)
plot(vol.garchibov)
# Identificacao da ordem do ARMA
library(forecast)
library(lmtest)
arma.aicvale <- auto.arima(vale, ic = "aic")
coeftest(arma.aicvale)
arma.aic <- auto.arima(petr, ic = "aic")
coeftest(arma.aic)
arma.aic <- auto.arima(vale, ic = "aic")
coeftest(arma.aic)
arma.aicvale <- auto.arima(vale, ic = "aic")
coeftest(arma.aicvale)
arma.aicpetr <- auto.arima(petr, ic = "aic")
coeftest(arma.aicpetr)
arma.aicibov <- auto.arima(ibov, ic = "aic")
coeftest(arma.aicibov)
arma.aicvale <- auto.arima(vale, ic = "aic", stepwise=FALSE, approx=FALSE)
coeftest(arma.aicvale)
arma.aicpetr <- auto.arima(petr, ic = "aic", stepwise=FALSE, approx=FALSE)
coeftest(arma.aicpetr)
arma.aicibov <- auto.arma(ibov, ic = "aic")
arma.aicpetr <- auto.arima(petr, ic = "bic")
coeftest(arma.aicpetr)
arma.aicpetr <- auto.arima(petr, ic = "aic", approx=FALSE)
coeftest(arma.aicpetr)
arma.aicpetrbic <- auto.arima(petr, ic = "bic")
coeftest(arma.aicpetrbic)
arma.aicvale <- auto.arima(vale, ic = "aic")
coeftest(arma.aicvale)
arma.aicibov <- auto.arima(ibov, ic = "aic")
coeftest(arma.aicibov)
arma.aicpetr <- auto.arima(petr, ic = "aic", approx=FALSE)
coeftest(arma.aicpetr)
arma.aicpetrbic <- auto.arima(petr, ic = "bic")
coeftest(arma.aicpetrbic)
# Definindo diretorio de trabalho
setwd("D:/Users/25052288840/Downloads/FIA_data_mining/Aula 11 - Análise de Séries Temporais/Data")
# Definindo diretorio de trabalho
setwd("D:/Users/25052288840/Downloads/FIA_data_mining/Aula 11 - Análise de Séries Temporais/Data")
# Carregando arquivo
data <- read.table("Data.csv", header = TRUE, sep=',')
head(data)
dim(data)
# Declarando time series
vale <- ts(vale, frequency = 12, start = c(2001, 1))
petr <- ts(data$PETR4, frequency = 12, start = c(2001, 1))
ibov <- ts(data$IBOV, frequency = 12, start = c(2001, 1))
# Declarando time series
vale <- ts(vale, frequency = 12, start = c(2001, 1))
# Declarando time series
vale <- ts(data$VALE3, frequency = 12, start = c(2001, 1))
# Calculando garch
garchvale <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchvale.fit <- ugarchfit(spec = garchvale, data = vale)
garchvale.fit
# Definindo diretorio de trabalho
setwd("D:/Users/25052288840/Downloads/FIA_data_mining/Aula 11 - Análise de Séries Temporais/Data")
# Definindo diretorio de trabalho
setwd("D:/Users/25052288840/Downloads/FIA_data_mining/Aula 11 - Análise de Séries Temporais/Data")
# Carregando arquivo
data <- read.table("Data.csv", header = TRUE, sep=',')
head(data)
dim(data)
# Declarando time series
vale <- ts(data$VALE3, frequency = 12, start = c(2001, 1))
petr <- ts(data$PETR4, frequency = 12, start = c(2001, 1))
ibov <- ts(data$IBOV, frequency = 12, start = c(2001, 1))
# Calculando garch
garchvale <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchvale.fit <- ugarchfit(spec = garchvale, data = vale)
garchvale.fit
garchpetr <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchpetr.fit <- ugarchfit(spec = garch, data = petr)
garchpetr.fit
garchibov <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchibov.fit <- ugarchfit(spec = garch, data = ibov)
garchibov.fit
# Volatilidade estimada
vol.garchvale <- sigma(garchvale.fit)
vol.garchpetr <- sigma(garchpetr.fit)
garchpetr <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchpetr.fit <- ugarchfit(spec = garchpetr, data = petr)
garchpetr.fit
garchibov <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchibov.fit <- ugarchfit(spec = garchibov, data = ibov)
garchibov.fit
# Volatilidade estimada
vol.garchvale <- sigma(garchvale.fit)
vol.garchpetr <- sigma(garchpetr.fit)
vol.garchibov <- sigma(garchibov.fit)
par(mfrow=c(1,3))
plot(vol.garch)
plot(vol.garchvale)
plot(vol.garchpetr)
plot(vol.garchibov)
# Identificacao da ordem do ARMA
library(forecast)
library(lmtest)
arma.aicvale <- auto.arima(vale, ic = "aic")
coeftest(arma.aicvale)
arma.aicibov <- auto.arima(ibov, ic = "aic")
coeftest(arma.aicibov)
arma.aicpetr <- auto.arima(petr, ic = "aic", approx=FALSE)
coeftest(arma.aicpetr)
arma.aicpetrbic <- auto.arima(petr, ic = "bic")
coeftest(arma.aicpetrbic)
ls(arma.aicvale)
arma.aicvale
arma.aicvale <- auto.arima(vale, ic = "aic")
arma.aicvale
coeftest(arma.aicvale)
arma.aicibov <- auto.arima(ibov, ic = "aic")
arma.aicibov
coeftest(arma.aicibov)
arma.aicpetr <- auto.arima(petr, ic = "aic", approx=FALSE)
arma.aicpetr
coeftest(arma.aicpetr)
arma.aicpetrbic <- auto.arima(petr, ic = "bic")
arma.aicpetrbic
par(mfrow=c(1,1))
acf(vale, main = "ACF dos Retornos Vale")
library(portes)
acf(petr, main = "ACF dos Retornos Petrobrás")
acf(vale, main = "ACF dos Retornos Vale")
acf(petr, main = "ACF dos Retornos Petrobrás")
acf(vale, main = "ACF dos Retornos Vale")
acf(petr, main = "ACF dos Retornos Petrobrás")
arma.aicpetrbic <- auto.arima(petr, ic = "bic", max.P = 0, max.Q = 0)
arma.aicpetrbic
auto.arima(petr, ic = "bic")
arma.aicpetr
acf(ibov, main = "ACF dos Retornos IBOV")
acf(petr, main = "ACF dos Retornos Petrobrás")
acf(ibov, main = "ACF dos Retornos IBOV")
acf(vale, main = "ACF dos Retornos Vale")
acf(vale, main = "ACF dos Retornos Vale")
acf(petr, main = "ACF dos Retornos Petrobrás")
acf(vale, main = "ACF dos Retornos Vale")
LjungBox(vale, lags = c(1), order = 0)
LjungBox(vale, lags = c(1, 2, 3, 4), order = 0)
acf(petr, main = "ACF dos Retornos Petrobrás")
LjungBox(petr, lags = c(1, 2, 3, 4, 5), order = 0)
acf(ibov, main = "ACF dos Retornos IBOV")
LjungBox(ibov, lags = c(1, 2, 3, 4), order = 0)
LjungBox(petr, lags = c(1, 2, 3, 4, 5), order = 0)
acf(petr, main = "ACF dos Retornos Petrobrás")
acf(vale, main = "ACF dos Retornos Vale")
arch.test(vale)
arch.test(arma.aicvale)
arma.aicvale <- auto.arima(vale, ic = "aic")
arma.aicvale
arch.test(arma.aicvale)
# Definindo diretorio de trabalho
setwd("D:/Users/25052288840/Downloads/FIA_data_mining/Aula 11 - Análise de Séries Temporais/Data")
# Carregando arquivo
data <- read.table("m-intcsp7309.txt", header = TRUE)
head(data)
dim(data)
# Selecionando variaveis
intel <- data$intc
head(intel)
# Declarando time series
intel <- ts(intel, frequency = 12, start = c(1973, 1))
# Plots
#install.packages("TSA")
library(TSA)
par(mfrow=c(1,2))
plot(intel, main = "Retornos da Intel", ylab = "Retorno")
acf(intel, main = "ACF dos Retornos")
par(mfrow=c(1,1))
# Ljung-Box
#install.packages("portes")
library(portes)
LjungBox(intel, lags = c(3,6,9,12), order = 0)
# Selecao de modelo ARMA
#install.packages("forecast")
library(forecast)
auto.arima(intel, ic = "bic", max.P = 0, max.Q = 0)
# Definindo diretorio de trabalho
setwd("D:/Users/25052288840/Downloads/FIA_data_mining/Aula 11 - Análise de Séries Temporais/Data")
# Carregando arquivo
data <- read.table("Data.csv", header = TRUE, sep=',')
head(data)
dim(data)
# Declarando time series
vale <- ts(data$VALE3, frequency = 12, start = c(2001, 1))
petr <- ts(data$PETR4, frequency = 12, start = c(2001, 1))
ibov <- ts(data$IBOV, frequency = 12, start = c(2001, 1))
# Calculando garch
garchvale <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchvale.fit <- ugarchfit(spec = garchvale, data = vale)
garchvale.fit
garchpetr <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchpetr.fit <- ugarchfit(spec = garchpetr, data = petr)
garchpetr.fit
garchibov <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchibov.fit <- ugarchfit(spec = garchibov, data = ibov)
garchibov.fit
# Volatilidade estimada
vol.garchvale <- sigma(garchvale.fit)
vol.garchpetr <- sigma(garchpetr.fit)
vol.garchibov <- sigma(garchibov.fit)
par(mfrow=c(1,3))
plot(vol.garchvale)
plot(vol.garchpetr)
plot(vol.garchibov)
# Identificacao da ordem do ARMA
library(forecast)
library(lmtest)
arma.aicvale <- auto.arima(vale, ic = "aic")
arma.aicvale
coeftest(arma.aicvale)
arma.aicibov <- auto.arima(ibov, ic = "aic")
arma.aicibov
coeftest(arma.aicibov)
arma.aicpetr <- auto.arima(petr, ic = "aic", approx=FALSE)
arma.aicpetr
coeftest(arma.aicpetr)
arma.bicpetr <- auto.arima(petr, ic = "bic", max.P = 0, max.Q = 0)
arma.bicpetr
arma.petr <- arima(petr, order = c(1,0,1), method = "ML")
resid.petr <- resid(arma.petr)
library(aTSA)
arch.test(arma.aicvale)
arch.test(arma.petr)
arma.petr <- arima(petr, order = c(1,0,1), method = "ML")
resid.petr <- resid(arma.petr)
arma.vale <- arima(vale, order = c(0,0,0), method = "ML")
resid.vale <- resid(arma.vale)
arch.test(arma.petr)
arch.test(arma.vale)
arma.ibov <- arima(ibov, order = c(2,0,0), method = "ML")
resid.ibov <- resid(arma.ibov)
arch.test(arma.ibov)
# Definindo diretorio de trabalho
setwd("D:/Users/25052288840/Downloads/FIA_data_mining/Aula 11 - Análise de Séries Temporais/Data")
# Carregando arquivo
data <- read.table("Data.csv", header = TRUE, sep=',')
head(data)
dim(data)
# Declarando time series
vale <- ts(data$VALE3, frequency = 12, start = c(2001, 1))
petr <- ts(data$PETR4, frequency = 12, start = c(2001, 1))
ibov <- ts(data$IBOV, frequency = 12, start = c(2001, 1))
# Identificacao da ordem do ARMA
library(forecast)
library(lmtest)
arma.aicvale <- auto.arima(vale, ic = "aic")
arma.aicvale
coeftest(arma.aicvale)
arma.aicpetr <- auto.arima(petr, ic = "aic", approx=FALSE)
arma.aicpetr
coeftest(arma.aicpetr)
arma.aicibov <- auto.arima(ibov, ic = "aic")
arma.aicibov
coeftest(arma.aicibov)
arma.bicpetr <- auto.arima(petr, ic = "bic", max.P = 0, max.Q = 0)
arma.bicpetr
arma.petr <- arima(petr, order = c(1,0,1), method = "ML")
resid.petr <- resid(arma.petr)
arma.vale <- arima(vale, order = c(0,0,0), method = "ML")
resid.vale <- resid(arma.vale)
arma.ibov <- arima(ibov, order = c(2,0,0), method = "ML")
resid.ibov <- resid(arma.ibov)
library(aTSA)
arch.test(arma.petr)
arch.test(arma.vale)
arch.test(arma.ibov)
# Calculando garch
garch.vale <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0), include.mean=TRUE),
distribution.model = "norm")
garchvale.fit <- ugarchfit(spec = garch.vale, data = vale)
garchvale.fit
garch.petr <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(1,1), include.mean=TRUE),
distribution.model = "norm")
garchpetr.fit <- ugarchfit(spec = garch.petr, data = petr)
garchpetr.fit
garch.ibov <- ugarchspec(
variance.model = list(model = "sGARCH", garchOrder = c(1,1)),
mean.model = list(armaOrder=c(2,0), include.mean=TRUE),
distribution.model = "norm")
garchibov.fit <- ugarchfit(spec = garch.ibov, data = ibov)
garchibov.fit
# Volatilidade estimada
vol.garchvale <- sigma(garchvale.fit)
vol.garchpetr <- sigma(garchpetr.fit)
vol.garchibov <- sigma(garchibov.fit)
par(mfrow=c(1,3))
plot(vol.garchvale)
plot(vol.garchpetr)
plot(vol.garchibov)
data.valores <-data[c(2,3,4)]
data.ts <- ts(data.valores, frequency = 12, start = c(2001, 1))
library(MTS)
install.packages("MTS")
library(MTS)
VARorder(data.ts, output = TRUE)
detach(package:MTS)
library(vars)
install.packages("vars")
var1 <- VAR(data, p = 1)
summary(var1)
# Estimacao VAR(5)
library(vars)
var1 <- VAR(data, p = 1)
var1 <- VAR(data.ts, p = 1)
summary(var1)
# Analise dos residuos
resid <- resid(var1)
library(MTS)
mq(resid, lag = 12, adj = 20)
causality(var1, cause = "PETR4")
causality(var1, cause = "VALE3")
causality(var1, cause = "IBOV")
causality(var1, cause = "PETR4")
causality(var1, cause = "IBOV")
causality(var1, cause = "VALE3")
causality(var1, cause = "IBOV")
causality(var1, cause = "PETR4")
# Definindo diretorio de trabalho
setwd("~/Dropbox/Classes/Other/FIA/Séries Temporais (Receita Federal)/Data")
# Carregando arquivo
data <- read.table("m-ibm3dx2608.txt", header = TRUE)
head(data)
dim(data)
# Selecionando variaveis
data <- data[,c(2,5)]
head(data)
# Declarando time series
data <- ts(data, frequency = 12, start = c(1926, 1))
# Determinacao da ordem do VAR
library(MTS)
VARorder(data, output = TRUE)
detach(package:MTS)
# Estimacao VAR(5)
library(vars)
var5 <- VAR(data, p = 5)
summary(var5)
# Analise dos residuos
resid <- resid(var5)
library(MTS)
mq(resid, lag = 12, adj = 20)
# Causalidade de Granger
causality(var5, cause = "ibmrtn")
causality(var5, cause = "sprtn")
causality(var1, cause = "PETR4")
causality(var1, cause = "VALE3")
causality(var1, cause = "IBOV")
causality(var1, cause = "PETR4")
causality(var1, cause = "VALE3")
causality(var1, cause = "IBOV")
